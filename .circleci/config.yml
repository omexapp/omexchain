version: 2.1

commands:
  make:
    parameters:
      description:
        type: string
      target:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/bin
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: << parameters.description >>
          command: |
            export BINDIR=/tmp/bin
            make << parameters.target >>

jobs:
  build:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - restore_cache:
          name: Restore go modules cache
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Cache go modules
          command: make go-mod-cache
      - run:
          name: Build
          command: make build
#      - run:
#          name: Unit Test
#          command: make test-unit
      - save_cache:
          name: Save go modules cache
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          name: Save source code cache
          key: go-src-v1-{{ .Revision }}
          paths:
            - ".git"
      - run:
          name: Run tests with coverage and upload codecov
          command: |
            set -ex
            echo "--> Run tests with coverage:"
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            mkdir -p /tmp/logs /tmp/workspace/profiles

            excluded_packages_expr="(omexchain/x/.*/client)|(x/simulation)"
            included_packages=("./app" "./x/backend" "./x/common" "./x/params" "./x/distribution" "./x/staking" "./x/gov" "./x/dex" "./x/ammswap" "./x/token" "./x/order" "./x/farm" "./x/evm")
            serial_exec_packages=("./app")
            for pkg in ${included_packages[@]}; do
              package_lines=`go list ${pkg}/... | grep -v -E "${excluded_packages_expr}"`
              echo "${package_lines[@]}"
              cover_pkgs=`echo ${package_lines[@]} | sed 's/ /,/g'`
              packages=`echo ${package_lines[@]}`
              id=`echo "${package_lines}" | head -n 1 | sed 's|[/.]|_|g'`
              SERIAL=
              found=`echo "${serial_exec_packages[@]}" | grep -wq "${pkg}" &&  echo "Yes" || echo "No"`
              if [ ${found} = "Yes" ]; then
                SERIAL=`echo "-p 1"`
              fi
              echo ${RACE}
              go test -mod=readonly -timeout 8m -race ${SERIAL} -coverprofile=/tmp/workspace/profiles/$id.out -coverpkg=${cover_pkgs} -covermode=atomic  -tags='ledger test_ledger_mock' ${packages} | tee "/tmp/logs/$id-$RANDOM.log"
            done

            echo "--> Gather coverage:"
            ls /tmp/workspace/profiles/
            echo "mode: atomic" > coverage.txt
            for prof in $(ls /tmp/workspace/profiles/); do
              tail -n +2 /tmp/workspace/profiles/"$prof" >> coverage.txt
            done

            echo "--> Filter out DONTCOVER:"
            excludelist="$(find . -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
            for filename in ${excludelist}; do
              filename=$(echo $filename | sed 's/^./github.com\/omex\/omexchain/g')
              echo "Excluding ${filename} from coverage report..."
              sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
            done

            echo "--> upload codecov:"
            bash <(curl -s https://codecov.io/bash) -f coverage.txt

#            ("./app" "./x/dex" "./x/backend"   "./x/order"  "./x/token" "./x/ammswap" "./x/farm"  "./x/backend")